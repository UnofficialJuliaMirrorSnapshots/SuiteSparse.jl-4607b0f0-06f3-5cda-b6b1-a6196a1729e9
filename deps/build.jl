using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, String["libsuitesparseconfig"], :libsuitesparseconfig),
    LibraryProduct(prefix, String["libamd"], :libamd),
    LibraryProduct(prefix, String["libbtf"], :libbtf),
    LibraryProduct(prefix, String["libcamd"], :libcamd),
    LibraryProduct(prefix, String["libccolamd"], :libccolamd),
    LibraryProduct(prefix, String["libcolamd"], :libcolamd),
    LibraryProduct(prefix, String["libcholmod"], :libcholmod),
    LibraryProduct(prefix, String["libldl"], :libldl),
    LibraryProduct(prefix, String["libklu"], :libklu),
    LibraryProduct(prefix, String["libumfpack"], :libumfpack),
    LibraryProduct(prefix, String["librbio"], :librbio),
    LibraryProduct(prefix, String["libspqr"], :libspqr),
    LibraryProduct(prefix, String["libsuitesparse_wrapper"], :libsuitesparse_wrapper),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/JuliaLinearAlgebra/SuiteSparseBuilder/releases/download/v5.2.0-0.2.20-1"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:aarch64, :glibc) => ("$bin_prefix/SuiteSparse.aarch64-linux-gnu.tar.gz", "90beffba269e1c236215e88084934a1b020f1f43f4158f0f13f39dca2e9aa840"),
    Linux(:armv7l, :glibc, :eabihf) => ("$bin_prefix/SuiteSparse.arm-linux-gnueabihf.tar.gz", "06715b53ea1ddb58dfd71d8b1a6f94030f040c4552421c79565bd15b2547afa4"),
    Linux(:i686, :glibc) => ("$bin_prefix/SuiteSparse.i686-linux-gnu.tar.gz", "a2a39dcf105c696fa8274b1ac246a8f9374ebba311990cc8d8692feff217d017"),
    Windows(:i686) => ("$bin_prefix/SuiteSparse.i686-w64-mingw32.tar.gz", "6214dd41a07bc4ebc008fcb46e533994fd2e87ddf2be47706c455d629b4c680a"),
    MacOS(:x86_64) => ("$bin_prefix/SuiteSparse.x86_64-apple-darwin14.tar.gz", "780cb5d13d9e7d83f4b1c00440aca37386be63cc44c971d900414db4b11a1d53"),
    Linux(:x86_64, :glibc) => ("$bin_prefix/SuiteSparse.x86_64-linux-gnu.tar.gz", "550f49f79586c137d718f8ff6217420976cb63dae0f3f9a57e169eb9155cb7e9"),
    Windows(:x86_64) => ("$bin_prefix/SuiteSparse.x86_64-w64-mingw32.tar.gz", "d29fa760fe373a7c5aa980b2cf967d7f3f8881ce3940fb1f05533adead759d7e"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
if haskey(download_info, platform_key())
    url, tarball_hash = download_info[platform_key()]
    if unsatisfied || !isinstalled(url, tarball_hash; prefix=prefix)
        # Download and install binaries
        install(url, tarball_hash; prefix=prefix, force=true, verbose=verbose)
    end
elseif unsatisfied
    # If we don't have a BinaryProvider-compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform $(triplet(platform_key())) is not supported by this package!")
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products)
